
services:
  # Eureka Server
  eureka-server:
    image: eureka-server:latest
    container_name: eureka-server
    build:
      context: ./eureka-server  # Assure-toi que le Dockerfile est dans ce répertoire
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    environment:
      - spring.application.name=eureka-server
      - server.port=8761
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
      - eureka.server.enableSelfPreservation=false

  # API Gateway
  api-gateway:
    image: api-gateway:latest
    container_name: api-gateway
    build:
      context: ./api-gateway  # Répertoire contenant le Dockerfile
      dockerfile: Dockerfile  # Spécifie le fichier Dockerfile
    ports:
      - "8090:8090"
    depends_on:
      - eureka-server
    environment:
      - spring.application.name=api-gateway
      - server.port=8090
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - spring.cloud.gateway.discovery.locator.enabled=true
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/health-app
    networks:
      - microservices-network

  # Medecin Service
  medecin-service:
    image: medecin-service:latest
    container_name: medecin-service
    build:
      context: ./medecin  # Répertoire contenant le Dockerfile
    ports:
      - "8180:8180"
    depends_on:
      - eureka-server
      - postgres
    environment:
      - spring.application.name=medecin-service
      - server.port=8180
      - spring.datasource.url=jdbc:postgresql://postgres:5432/medecin-service
      - spring.datasource.username=postgres
      - spring.datasource.password=root
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    restart: always

  # Facture Service
  facture-service:
    image: facture-service:latest
    container_name: facture-service
    build:
      context: ./ms-facture  # Répertoire contenant le Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      - eureka-server
      - mysql
    environment:
      - spring.application.name=facturation
      - server.port=8089
      - spring.datasource.url=jdbc:mysql://mysql:3306/micro_facturation?useUnicode=true&useJDBCCompliantTimezoneShift=true&createDatabaseIfNotExist=true&useLegacyDatetimeCode=false&serverTimezone=UTC
      - spring.datasource.username=root
      - spring.datasource.password=root
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    restart: always

  # Patient Service
  patient-service:
    image: patient-service:latest
    container_name: patient-service
    build:
      context: ./ms-patient  # Répertoire contenant le Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      - eureka-server
    environment:
      - spring.application.name=patient-service
      - server.port=8087
      - spring.datasource.url=jdbc:h2:mem:patientdb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1
      - spring.datasource.username=sa
      - spring.datasource.password=password
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    restart: always

  # RDV Service
  rdv-service:
    image: rdv-service:latest
    container_name: rdv-service
    build:
      context: ./ms-rendez-vous  # Répertoire contenant le Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      - eureka-server
    environment:
      - spring.application.name=rdv-service
      - server.port=8088
      - spring.datasource.url=jdbc:h2:mem:rdvdb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1
      - spring.datasource.username=sa
      - spring.datasource.password=password
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    networks:
      - microservices-network
    restart: always

  # Fiche Service
  fiche-service:
    image: fiche-service:latest
    container_name: fiche-service
    build:
      context: ./fiche-ms  # Répertoire contenant le Dockerfile
    ports:
      - "8186:8186"
    depends_on:
      - eureka-server
    environment:
      - spring.application.name=fiche-service
      - server.port=8186
      - spring.datasource.url=jdbc:h2:mem:testdb
      - spring.datasource.username=sa
      - spring.datasource.password=password
      - spring.h2.console.enabled=true
      - spring.jpa.hibernate.ddl-auto=update
      - eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
      - eureka.client.register-with-eureka=true
      - eureka.client.fetch-registry=true
    networks:
      - microservices-network
    restart: always

  # PostgreSQL Database for Medecin Service
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: medecin-service
    volumes:
      - medecin-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # MySQL Database for Facture Service
  mysql:
    image: mysql:8
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: micro_facturation
    volumes:
      - facture-db-data:/var/lib/mysql
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  medecin-db-data:
  facture-db-data:
